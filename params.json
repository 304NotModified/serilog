{"name":"Serilog","tagline":"The best of traditional and structured logging for .NET","body":"## Why Serilog?\r\n\r\nLike other logging libraries for .NET, Serilog provides diagnostic logging to files, the console, and so-on. It is easy to set up, has a clean API, and is portable between recent .NET platforms.\r\n\r\nUnlike other logging libraries for .NET, parameters passed along with log messages are not destructively rendered into a text format. Instead, they're preserved as structured data, that can be written in document form to a NoSQL data store.\r\n\r\n```c#\r\nvar sensorInput = new { Latitude = 25, Longitude = 134 };\r\nvar elapsedMs= 34;\r\n\r\nlog.Information(\"Processed {@SensorInput} in {Elapsed:000} ms.\", sensorInput, elapsedMs);\r\n```\r\n\r\nSerilog message templates use a simple DSL that extends the regular .NET format strings. Properties are named within the message template, and matched positionally with the arguments provided to the log method.\r\n\r\nThis example records two properties, `SensorInput` and `Elapsed` along with the log event.\r\n\r\nThe properties captured in the example, in JSON format, would appear like:\r\n\r\n```c#\r\n{ \"SensorInput\": { \"Latitude\": 25, \"Longitude\": 134 },\r\n  \"Elapsed\": 34 }\r\n```\r\n\r\nThe `@` operator in front of `SensorInput` instructs Serilog to preserve the structure of the object passed in. If this is omitted, Serilog recognises simple types like strings, numbers, dates and times, dictionaries and enumerables; all other objects are converted into strings using `ToString()`. 'Stringification' can be forced using the `$` operator in place of `@`.\r\n\r\nThe `:000` segment following `Elapsed` is a standard .NET format string that affects how the property is rendered (not how it is captured). The standard console sink included with Serilog will render the above message as:\r\n\r\n```\r\n09:14:22 [Information] Processed { Latitude: 25, Longitude: 134 } in 034 ms. \r\n```\r\n\r\n## Documentation\r\n\r\n* [Getting Started](https://github.com/nblumhardt/serilog/wiki/Getting-Started)\r\n* [Configuration Basics](https://github.com/nblumhardt/serilog/wiki/Configuration-Basics)\r\n* [Writing Log Events](https://github.com/nblumhardt/serilog/wiki/Writing-Log-Events)\r\n* [Structured Data](https://github.com/nblumhardt/serilog/wiki/Structured-Data)\r\n* [Provided Sinks](https://github.com/nblumhardt/serilog/wiki/Provided-Sinks)\r\n* [Debugging and Diagnostics](https://github.com/nblumhardt/serilog/wiki/Debugging-and-Diagnostics)\r\n\r\n## Resources\r\n\r\n* [Discussion forum](https://groups.google.com/group/serilog)\r\n* [Blog posts at nblumhardt.com](http://nblumhardt.com)\r\n* [Project homepage](http://serilog.net)\r\n* [Packages on NuGet](https://nuget.org/packages?q=Tags%3A%22serilog%22)","google":"UA-2985547-8","note":"Don't delete this file! It's used internally to help with page regeneration."}