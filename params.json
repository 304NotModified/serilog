{"name":"Serilog","tagline":"A no-nonsense logging library for the NoSQL era.","body":"### Installing from NuGet\r\nThe core logging package is [Serilog](http://nuget.org/packages/Serilog). The supported platforms are .NET 4.5, Windows 8 (WinRT) and Windows Phone 8.\r\n\r\n```ps1\r\nPM> Install-Package Serilog\r\n```\r\n\r\nThe sample CouchDB sink is [Serilog.Sinks.CouchDB](http://nuget.org/packages/Serilog.Sinks.CouchDB).\r\n\r\n```ps1\r\nPM> Install-Package Serilog.Sinks.CouchDB\r\n```\r\n\r\n### A no-nonsense logging library\r\nSerilog is simple to configure and use via its C# API. _No XML configuration support is implemented - if you require XML configuration you'll need to pull values from `System.Configuration` by hand._\r\n\r\nTypes are in the `Serilog` namespace.\r\n\r\n```c#\r\nusing Serilog;\r\n```\r\n\r\nAn `ILogger` is created using `LoggerConfiguration`.\r\n\r\n```c#\r\nvar log = new LoggerConfiguration()\r\n    .WriteTo.DiagnosticTrace()\r\n    .WriteTo.CouchDB(\"http://couch.example.com/log\")\r\n    .CreateLogger();\r\n```\r\n\r\nLog messages are written using a familiar API.\r\n\r\n```c#\r\nlog.Information(\"Hello, world!\");\r\n```\r\n\r\nSerilog's global, statically accessible logger, is set via `Log.Logger` and can be invoked using the static methods on the `Log` class.\r\n\r\n```c#\r\nLog.Logger = log;\r\nLog.Debug(\"The global logger has been configured.\")\r\n```\r\n\r\n### For the NoSQL era\r\nUnlike other logging libraries for .NET, parameters passed along with log messages are not destructively rendered into a text format. Instead, they're preserved as structured data, that can be written in document form to a store like CouchDB.\r\n\r\n```c#\r\nvar sensorInput = new { Latitude = 25, Longitude = 134 };\r\nvar processingTimeMs = 34;\r\n\r\nLog.Information(\"Processed {@SensorInput} in {TimeMS:000} ms.\", sensorInput, processingTimeMs);\r\n```\r\n\r\nSerilog message templates use a simple DSL that extends the regular .NET format strings. Properties are named within the message template, and matched positionally with the arguments provided to the log method.\r\n\r\nThis example records two properties, `SensorInput` and `TimeMS` along with the log event.\r\n\r\nThe `@` symbol in front of `SensorInput` instructs Serilog to preserve the structure of the object passed in. Where this is omitted, Serilog recognises simple types like `string`, `int` and enumerables; all other objects are converted into strings using `ToString()`. The properties captured in the example, in JSON format, would appear like:\r\n\r\n```js\r\n{ \"SensorInput\": { \"Latitude\": 25, \"Longitude\": 134 },\r\n  \"TimeMS\": 34 }\r\n```\r\n\r\nThe `:000` segment following `TimeMS` is a standard .NET format string that affects how the property is rendered (not how it is captured). The standard console sink included with Serilog will render the above message as:\r\n\r\n```\r\n... [Information] Processed { Latitude: 25, Longitude: 134 } in 034 ms. \r\n```","google":"UA-2985547-8","note":"Don't delete this file! It's used internally to help with page regeneration."}