{"name":"Serilog","tagline":"A no-nonsense logging library for the NoSQL era.","body":"### Installing from NuGet\r\nThe core logging package is [Serilog](http://nuget.org/packages/Serilog).\r\n\r\n```\r\nPM> Install-Package Serilog\r\n```\r\n\r\nThe sample CouchDB sink is [Serilog.Sinks.CouchDB](http://nuget.org/packages/Serilog.Sinks.CouchDB).\r\n\r\n```\r\nPM> Install-Package Serilog.Sinks.CouchDB\r\n```\r\n\r\n### A no nonsense logging library\r\nSerilog is simple to configure and use via a simple C# API. _No XML configuration support is currently implemented - if you need XML configuration you'll need to pull values from `System.Configuration` by hand._\r\n\r\nTypes are in the `Serilog` namespace.\r\n\r\n```\r\nusing Serilog;\r\n```\r\n\r\nAn `ILogger` is created using `LoggerConfiguration`.\r\n\r\n```\r\nvar log = new LoggerConfiguration()\r\n    .WithDiagnosticTraceSink()\r\n    .WithCouchDBSink(\"http://couch.example.com/log\")\r\n    .CreateLogger();\r\n```\r\n\r\nIf you prefer a global, statically accessible log, set `Log.Logger`.\r\n\r\n```\r\nLog.Logger = log;\r\n```\r\n\r\nLog messages are written via a `log` variable or via the `Log` class, using a familiar API.\r\n\r\n```\r\nLog.Information(\"Hello, world!\");\r\n```\r\n\r\n### For the NoSQL era\r\nUnlike other logging libraries for .NET, parameters passed along with log messages are not destructively rendered into a text format. Instead, they're preserved as structured data, that can be written in document form to a store like CouchDB.\r\n\r\n```\r\nvar sensorInput = new { Latitude = 25, Longitude = 134 };\r\nvar processingTimeMs = 34;\r\n\r\nLog.Information(\"Processed {@SensorInput} in {TimeMS:000} ms.\", sensorInput, processingTimeMs);\r\n```\r\n\r\nSerilog message templates use a simple DSL in place of the regular (`{0}` etc.) .NET format strings. Properties are named within the message template, and matched positionally with the arguments provided to the log method.\r\n\r\nThis example records two properties, `SensorInput` and `TimeMS` along with the log event.\r\n\r\nThe `@` symbol in front of `SensorInput` instructs Serilog to preserve the structure of the object passed in; by default, Serilog only recognises simple types like `string`, `int` and enumerables. All other objects are converted into strings using `ToString`. The properties captured in the example, in JSON format, would appear like:\r\n\r\n```\r\n{ \"SensorInput\": { \"Latitude\": 25, \"Longitude\": 134 },\r\n  \"TimeMS\": 34 }\r\n```\r\n\r\nThe `:000` segment following `TimeMS` is a standard .NET format string that affects how the property is rendered (not how it is captured). The standard console sink included with Serilog will render the above message as:\r\n\r\n```\r\n[...] Information: Processed { Latitude: 25, Longitude: 134 } in 034 ms. \r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}